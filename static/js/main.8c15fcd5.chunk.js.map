{"version":3,"sources":["firebase.js","Pages/carousel.jsx","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","storage","React","require","Carousel","DemoCarousel","useState","image","setImage","urlArray","setUrlArray","progress","setProgress","useEffect","collection","onSnapshot","snapshot","docs","map","doc","id","data","className","autoPlay","interval","infiniteLoop","swipeable","emulateTouch","dynamicHeight","showThumbs","url","IconButton","href","style","width","alt","src","imageUrl","height","Button","onClick","imageName","delete","ref","name","then","catch","error","console","log","variant","color","startIcon","Delete","margin","position","bottom","value","max","type","onChange","event","target","files","put","on","Math","round","bytesTransferred","totalBytes","child","getDownloadURL","push","add","CloudUpload","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8c15fcd5.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCW8KRQdx2ZLPW3wmNHUIpXG1QgfGWfCyI\",\r\n    authDomain: \"carousel-client.firebaseapp.com\",\r\n    databaseURL: \"https://carousel-client.firebaseio.com\",\r\n    projectId: \"carousel-client\",\r\n    storageBucket: \"carousel-client.appspot.com\",\r\n    messagingSenderId: \"380997395852\",\r\n    appId: \"1:380997395852:web:ac88383e5d8199e27be2a9\",\r\n    measurementId: \"G-T6CD1GENRX\"\r\n  };\r\n  // Initialize Firebase\r\n  const firebaseApp= firebase.initializeApp(firebaseConfig);\r\n  const db= firebaseApp.firestore();\r\n  const storage= firebase.storage();\r\n\r\n  export{storage,db, firebase as default};","import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport './carousel.css';\r\nimport { Button, IconButton } from '@material-ui/core';\r\nimport { Delete, CloudUpload } from \"@material-ui/icons\";\r\nimport { useState } from \"react\";\r\nimport { storage } from \"../firebase\";\r\nimport { db } from \"../firebase\";\r\nimport { useEffect } from \"react\";\r\nvar React = require('react');\r\nvar Carousel = require('react-responsive-carousel').Carousel;\r\n\r\n\r\nconst DemoCarousel = () => {\r\n\r\n    const form = \"https://goasolutions.paperform.co/\";\r\n    const [image, setImage] = useState(null);\r\n    const [urlArray, setUrlArray] = useState([]);\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    useEffect(() => {\r\n        db.collection(\"imagesData\").onSnapshot((snapshot) =>\r\n            setUrlArray(\r\n                snapshot.docs.map((doc) => ({\r\n                    id: doc.id,\r\n                    data: doc.data(),\r\n                }))\r\n            )\r\n        );\r\n    }, [])\r\n\r\n    const selectFileHandler = (event) => {\r\n        if (event.target.files[0]) {\r\n            setImage(event.target.files[0]);\r\n        }\r\n\r\n    }\r\n\r\n    const deleteImage = (id, name) => {\r\n        db.collection(\"imagesData\").doc(id).delete();\r\n        //delete from storage\r\n        var desertRef = storage.ref(`images/${image.name}`);\r\n        desertRef.delete().then(function() {\r\n            // File deleted successfully\r\n          }).catch(function(error) {\r\n            // Uh-oh, an error occurred!\r\n            console.log(error);\r\n          });\r\n    }\r\n\r\n    const uploadFileHandler = () => {\r\n        if(image){\r\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            snapshot => {\r\n                const progress = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                );\r\n                setProgress(progress);\r\n            },\r\n            error => {\r\n                console.log(error);\r\n            },\r\n            () => {\r\n                storage.ref(\"images\").child(image.name).getDownloadURL().then(url => {\r\n                    urlArray.push(url);\r\n                    console.log(urlArray);\r\n                    db.collection(\"imagesData\").add({\r\n                        imageUrl: url,\r\n                        imageName: image.name\r\n                    });\r\n\r\n                })\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n    return (\r\n        <div className=\"carousel\">\r\n\r\n            <Carousel autoPlay interval=\"2000\" infiniteLoop swipeable emulateTouch dynamicHeight showThumbs={false} >\r\n\r\n                {urlArray.map((url) =>\r\n                    (<div>\r\n\r\n                        <IconButton href={form} style={{ width: \"99vw\" }}>\r\n                            <img  alt=\"Not Loaded\" src={url.data.imageUrl} height=\"400\" width=\"480\" />\r\n\r\n                        </IconButton>\r\n                        <br />\r\n                        <Button\r\n                            onClick={() => { deleteImage(url.id, url.data.imageName) }}\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            // className=\"deleteButton\"\r\n                            startIcon={<Delete />}\r\n                            style={{ margin: \"0\", position: \"relative\", bottom: \"40px\" }}\r\n                        >\r\n                            Delete\r\n    </Button>\r\n\r\n                    </div>)\r\n                )}\r\n\r\n                {/* <div>\r\n                <img alt=\"\" src={urlArray[1]} height=\"400\" width=\"480\" />    \r\n                    <p className=\"legend\">Legend 14</p>\r\n                </div> */}\r\n            </Carousel>\r\n            <div className=\"carousel_actions\">\r\n\r\n                <progress value={progress} max=\"100\" />\r\n                <br />\r\n                <input type=\"file\" onChange={selectFileHandler}id=\"upload-button\" />\r\n\r\n                <Button\r\n                    onClick={uploadFileHandler}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    // className=\"uploadButton\"\r\n                    startIcon={<CloudUpload />}\r\n                >\r\n                    Upload\r\n    </Button>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\nexport default DemoCarousel;\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport DemoCarousel from './Pages/carousel';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <DemoCarousel/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}